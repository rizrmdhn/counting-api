{
	"info": {
		"_postman_id": "c8191d3f-8da6-4b09-8466-c7dcafafde4c",
		"name": "Counting API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23747932"
	},
	"item": [
		{
			"name": "Acara",
			"item": [
				{
					"name": "Add Acara",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.acaraId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('acaraId', responseJson.data.acaraId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"namaAcara\": \"test\",\r\n    \"tahunAcara\": 2022\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/acara",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"acara"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Acara",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.acara).to.be.an('array');\r",
									"    pm.expect(responseJson.data.acara).to.length.least(1);\r",
									"\r",
									"    const acara = responseJson.data.acara;\r",
									"    acara.forEach((acara) => {\r",
									"        pm.expect(Object.keys(acara)).to.length(3);\r",
									"        pm.expect(acara.id).to.be.ok;\r",
									"        pm.expect(acara.name).to.be.ok;\r",
									"        pm.expect(acara.year).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/acara",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"acara"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Acara",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail song', () => {\r",
									"    const acaraId = pm.environment.get('acaraId');\r",
									"    const port = 5000;\r",
									"    pm.sendRequest(`http://localhost:${port}/acara/${acaraId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.acara).to.be.an('object');\r",
									"                pm.expect(responseJson.data.acara.id).to.equal(acaraId);\r",
									"                pm.expect(responseJson.data.acara.name).to.equal('test2');\r",
									"                pm.expect(responseJson.data.acara.year).to.equal(2021);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"namaAcara\": \"test2\",\r\n    \"tahunAcara\": 2021\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/acara/{{acaraId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"acara",
								"{{acaraId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Acara",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail song', () => {\r",
									"    const acaraId = pm.environment.get('acaraId');\r",
									"    const port = 5000;\r",
									"    pm.sendRequest(`http://localhost:${port}/acara/${acaraId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with not found', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/acara/{{acaraId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"acara",
								"{{acaraId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Kegiatan",
			"item": [
				{
					"name": "[No test] Prerequisite",
					"item": [
						{
							"name": "Add Acara",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.environment.set('acaraId', responseJson.data.acaraId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"namaAcara\": \"test\",\r\n    \"tahunAcara\": 2022\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/acara",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"acara"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Kegiatan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.kegiatanId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('kegiatanAId', responseJson.data.kegiatanId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"namaKegiatan\": \"kegiatanA\",\r\n    \"tahunKegiatan\": 2022,\r\n    \"acaraId\": \"{{acaraId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/kegiatan",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"kegiatan"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Kegiatan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.kegiatan).to.be.an('array');\r",
									"    pm.expect(responseJson.data.kegiatan).to.length.least(1);\r",
									"\r",
									"    const kegiatan = responseJson.data.kegiatan;\r",
									"    kegiatan.forEach((kegiatan) => {\r",
									"        pm.expect(Object.keys(kegiatan)).to.length(3);\r",
									"        pm.expect(kegiatan.id).to.be.ok;\r",
									"        pm.expect(kegiatan.name).to.be.ok;\r",
									"        pm.expect(kegiatan.year).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/kegiatan",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"kegiatan"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Kegiatan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail song', () => {\r",
									"    const kegiatanId = pm.environment.get('kegiatanAId');\r",
									"    const port = 5000;\r",
									"    pm.sendRequest(`http://localhost:${port}/kegiatan/${kegiatanId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.kegiatan).to.be.an('object');\r",
									"                pm.expect(responseJson.data.kegiatan.id).to.equal(kegiatanId);\r",
									"                pm.expect(responseJson.data.kegiatan.name).to.equal('kegiatanRevised');\r",
									"                pm.expect(responseJson.data.kegiatan.year).to.equal(2021);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"namaKegiatan\": \"kegiatanRevised\",\r\n    \"tahunKegiatan\": 2021,\r\n    \"acaraId\": \"{{acaraId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/kegiatan/{{kegiatanAId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"kegiatan",
								"{{kegiatanAId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Kegiatan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail song', () => {\r",
									"    const kegiatanId = pm.environment.get('kegiatanAId');\r",
									"    const port = 5000;\r",
									"    pm.sendRequest(`http://localhost:${port}/kegiatan/${kegiatanId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with not found', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/kegiatan/{{kegiatanAId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"kegiatan",
								"{{kegiatanAId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Kegiatan Fisik",
			"item": [
				{
					"name": "[No test] Prerequisite",
					"item": [
						{
							"name": "Add Acara",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.environment.set('acaraId', responseJson.data.acaraId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"namaAcara\": \"test\",\r\n    \"tahunAcara\": 2022\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/acara",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"acara"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Kegiatan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.environment.set('kegiatanAId', responseJson.data.kegiatanId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"namaKegiatan\": \"kegiatanA\",\r\n    \"tahunKegiatan\": 2022,\r\n    \"acaraId\": \"{{acaraId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/kegiatan",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"kegiatan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Post Kegiatan Fisik",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.kegiatanFisikId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('kegiatanFisikAId', responseJson.data.kegiatanFisikId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"namaKegiatanFisik\": \"kegiatanFisikA\",\r\n    \"quantityKegiatanFisik\": 2,\r\n    \"unitKegiatanFisik\": \"paket\",\r\n    \"alokasiDanaKegiatanFisik\": 1000000,\r\n    \"kegiatanId\": \"{{kegiatanAId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/kegiatan-fisik",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"kegiatan-fisik"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Kegiatan Fisik",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.kegiatanFisik).to.be.an('array');\r",
									"    pm.expect(responseJson.data.kegiatanFisik).to.length.least(1);\r",
									"\r",
									"    const kegiatanFisik = responseJson.data.kegiatanFisik;\r",
									"    kegiatanFisik.forEach((kegiatanFisik) => {\r",
									"        pm.expect(Object.keys(kegiatanFisik)).to.length(5);\r",
									"        pm.expect(kegiatanFisik.id).to.be.ok;\r",
									"        pm.expect(kegiatanFisik.name).to.be.ok;\r",
									"        pm.expect(kegiatanFisik.quantity).to.be.ok;\r",
									"        pm.expect(kegiatanFisik.unit).to.be.ok;\r",
									"        pm.expect(kegiatanFisik.price).to.be.ok;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/kegiatan-fisik",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"kegiatan-fisik"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Kegiatan Fisik",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail song', () => {\r",
									"    const kegiatanId = pm.environment.get('kegiatanFisikAId');\r",
									"    const port = 5000;\r",
									"    pm.sendRequest(`http://localhost:${port}/kegiatan-fisik/${kegiatanId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.kegiatanFisik).to.be.an('object');\r",
									"                pm.expect(responseJson.data.kegiatanFisik.id).to.equal(kegiatanId);\r",
									"                pm.expect(responseJson.data.kegiatanFisik.name).to.equal('kegiatanFisikARevised');\r",
									"                pm.expect(responseJson.data.kegiatanFisik.quantity).to.equal(5);\r",
									"                pm.expect(responseJson.data.kegiatanFisik.unit).to.equal('orang');\r",
									"                pm.expect(responseJson.data.kegiatanFisik.price).to.equal(1500000);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"namaKegiatanFisik\": \"kegiatanFisikARevised\",\r\n    \"quantityKegiatanFisik\": 5,\r\n    \"unitKegiatanFisik\": \"orang\",\r\n    \"alokasiDanaKegiatanFisik\": 1500000,\r\n    \"kegiatanId\": \"{{kegiatanAId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/kegiatan-fisik/{{kegiatanFisikAId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"kegiatan-fisik",
								"{{kegiatanFisikAId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Kegiatan Fisik",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail song', () => {\r",
									"    const kegiatanId = pm.environment.get('kegiatanFisikAId');\r",
									"    const port = 5000;\r",
									"    pm.sendRequest(`http://localhost:${port}/kegiatan-fisik/${kegiatanId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with not found', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/kegiatan-fisik/{{kegiatanFisikAId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"kegiatan-fisik",
								"{{kegiatanFisikAId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}